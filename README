WHAT?
-----
This is my .emacs.d folder. I've tried to keep it consistent across machines running Debian Squeeze and Snow Leopard. 

WHY?
----
How is this different from emacs-starter-kit you ask? I tried customizing the emacs-starter-kit but I couldn't satisfactorily make that happen. Most of my frustrations revolved around ELPA and it's brittleness. The archives don't contain a lot of packages. I've seen lots of packages that aren't maintained any more.  Others have created their own forks with lots more features. If I were to use a standard archive, I would still have to refer to these non-standard locations in order to get the packages I want. Also, I wanted to churn out some Elisp code and get a better understanding of how extensible Emacs really is.

HOW?
----
To start using this, do the following:

cd ~						# Go to your home folder	    
rm .emacs					# Remove the .emacs file if it exists
git clone https://github.com/habib/.emacs.d.git # Clone this repository
cd .emacs.d					
git submodule init				# Update the dependencies
git submodule update 				# Wait patiently if you hail from a bandwidth starved nation
cd packages/rinari				# Goto the rinari mode
git submodule init
git submodule update				# Rinari mode has its own dependencies

The .gitmodules file will tell you that most of the packages are from https://github.com/emacsmirror/ . That's an awesome resource and I thank the maintainers. 

The themes are stored in the 'themes' folder. I prefer a slightly modified zenburn. Choose your own, put it in the themes folder and modify the init.el file accordingly. All the packages are stored in the 'packages' folder. The list keeps changing. See .gitmodules for an up-to-date listing.

WHAT ELSE?
----------
You'll need to install ack (or ack-grep if in Debian), exuberant-ctags and cscope for all the packages to work. 

If do Ruby development, you will love the RSense mode. Download the latest stable version (0.3 as of now) and extract the contents to your ~/opt folder. Follow this for more information: http://cx4a.org/software/rsense/

WHAT NEXT?
----------
* Emacs-IDE is a neat idea. However it doesn't play well with IDO mode. The alternative is CEDET which is moody and clunky. Either fix Emacs-IDE or get rid of it.

* Steal ruby-mode settings from the emacs-starter-kit. <- PARTIALLY DONE.

* Store machine-specific settings separately.

* Make rspec-mode and shoulda-mode work properly.

* Wire up AutoComplete and Yasnippet. 

* Set up JavaScript lint checking with a Node.js server. Overkill? Yes. Absolutely awesome? You betcha!

* Let RVM pick up the appropriate .el files when you switch Rubies. <- IN PROGRESS.

* Work towards a solution for cleanly maintaining packages. The workflow can be as follows:
The user points to a git repo which will added as a submodule, fetched and compiled. The compiled .elcs are stored out of git's purview. The user can also get packages via ELPA if so desired. Yes, el-get does most of what I want and I am looking at modifying it.

